import foo.Bar // Bar доступен
import bar.Bar as bBar // bBar заменяет имя 'bar.Bar'

    val text = """ |Tell me an\n I forget.
    |Teach me and I remember.
    |Involve me and I lear"n.
    |(Benjamin Franklin)"""

    val sa = """ |Tell me an\n I forget.
    |Teach me and I remember.
    |Involve me and I lear"n.
    |(Benjamin Franklin)"
    """

    val a = """"""

    print(text)
interface A {
    fun foo() { print('\u00000') }
    fun bar() { print('\u0000') }
	a == b AD==AS
	AD == D
}

interface B {
    fun foo() { print("\u0111") }
    fun bar() { print("bar\u4444") }
}

class C : A {
    override fun bar() { print("asd\u2FFFbar") }
}

class D : A, B {
    override fun foo() {
        super<A>.foo()
        super<B>.foo()
    }
    
    override fun bar() {
        super<B>.bar()
    }
}

/* Class name
*  param
*  return 
*/
class MyClass (val a: Int, var b: String, var f: Float, var q: String{
    
    private val x: IntArray = intArrayOf(1, 2, 3)
    x[0] = x[1] + x[2]
    private lateinit var str: String = "Hello, world!";
    
    //Test
    public val oneMillion: Int = 1_000_000
    protected val hexBytes: Int = 0xFF_EC
    private val bytes: Int = 0b11010010_01101001

    fun someFun(): Int {
        f : Float = 2.7182818284
        f : Float = 1.23456e-65
	println (0x0f)
        return a + c[123];
	for (item in collection)
 		print(item)
	do {
  		val y = retrieveData()
	} while (y != null) // y здесь доступно!
    }

    init {
        val x: Int = 5; 
        when (x) {
        	1 -> print("x == 1")
        	2 -> print("x == 2")
          else -> { // обратите внимание на блок
        	print("x is neither 1 nor 2")
        }
        }
        val max = if (a > b) { 
        	print("возвращаем a") 
        	a 
        } 
        else { 
        	print("возвращаем b") 
        	b 
        }
        if (max >100)
        	str = "sdf $b  faxs fasf $a sfas"
	else	
        	str = "$n"
        someFun();
    }
}